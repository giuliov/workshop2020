trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - WorkshopAPI/*
    exclude:
    - '*'

variables:
  main_branch: 'master'
  is_main_branch: $[eq(variables['Build.SourceBranchName'], variables['main_branch'])]
  build_configuration: 'Release'
  # semantic versioning version
  version_major_minor: 1.0
  version_semantic: '$(Build.BuildNumber)'
  # Azure Resource Manager connection created during pipeline creation
  arm_connection: 'Microsoft Azure Sponsorship'
  azure_subscription_id: '2e2951eb-61c7-446c-bc0c-d3896ec352b6'
  resourcegroup_name: 'workshop2020'
  # Function app name
  functionapp_name: 'api'
  # Agent VM image name
  agent_image_name: 'windows-2019'

# this is the simplest way to generate a three-part SemVer (https://semver.org/) id
# CAVEAT: some tools breaks when a part goes above 65535, which might happen using BuildID on a busy Organization
name: $(version_major_minor).$(BuildID)
# the following is slightly better but it is a 4-part not compliant with SemVer
#name: $(version_major_minor).$(Year:yy)$(DayOfYear)$(Rev:.r)

stages:
- stage: Setup
  displayName: Setup stage
  jobs:
  - job: Setup
    displayName: Setup
    pool:
      vmImage: $(agent_image_name)

    steps:
    # redeploy the ARM Template to configure Azure Resources
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(arm_connection)'
        subscriptionId: '$(azure_subscription_id)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourcegroup_name)'
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/WorkshopAPI/setup/ARM-template/template.json'
        csmParametersFile: '$(Build.SourcesDirectory)/WorkshopAPI/setup/ARM-template/parameters.json'
        overrideParameters: '-functionAppName $(functionapp_name) -productVersion $(version_semantic)'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'JsonArmOutputs'
    # extract a couple of properties from the single Json object into variables
    - pwsh: |
        $armOutputs = ConvertFrom-Json '$(JsonArmOutputs)'
        $value = $armOutputs.ProductionConnectionString.value
        Write-Host "##vso[task.setvariable variable=ProductionConnectionString;isOutput=true;]$value"
        $value = $armOutputs.StagingConnectionString.value
        Write-Host "##vso[task.setvariable variable=StagingConnectionString;isOutput=true;]$value"        
        $value = $armOutputs.FunctionAppName.value
        Write-Host "##vso[task.setvariable variable=FunctionAppName;isOutput=true;]$value"
        $value = $armOutputs.StagingBaseUrl.value
        Write-Host "##vso[task.setvariable variable=StagingBaseUrl;isOutput=true;]$value"
        $value = $armOutputs.ProductionBaseUrl.value
        Write-Host "##vso[task.setvariable variable=ProductionBaseUrl;isOutput=true;]$value"
      name: generateArmVariables
      displayName: Capture ARM output and generate stage variables

- stage: Build
  displayName: Build stage
  dependsOn: Setup
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(agent_image_name)

    steps:
    # Sonar configuration
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'workshop-2020-it'
        organization: 'workshop-2020-it'
        scannerMode: 'MSBuild'
        projectKey: 'workshop-2020-it_docente_api'
        projectName: 'API (docente)'
        projectVersion: '$(version_semantic)'
        extraProperties: |
          # Additional properties that will be passed to the scanner,
          # Put one key=value per line, example:
          sonar.exclusions=**/*.bin
      condition: and(succeeded(), eq(variables.is_main_branch, true))
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: WorkshopAPI/src/API/WorkshopAPI.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(build_configuration) /p:VERSION=$(version_semantic)
    - task: DotNetCoreCLI@2
      displayName: Unit Tests
      inputs:
        command: 'test'
        projects: WorkshopAPI/src/tests/WorkshopAPI.UnitTests/WorkshopAPI.UnitTests.csproj
        arguments: '--collect "XPlat Code Coverage" --results-directory "$(System.DefaultWorkingDirectory)/testresults" --logger trx'
        publishTestResults: false
        testRunTitle: 'Unit Tests'
        workingDirectory: '$(System.DefaultWorkingDirectory)/WorkshopAPI/src'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/*.trx'
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
        testRunTitle: 'Unit Tests'
    - task: reportgenerator@4
      displayName: ReportGenerator
      inputs:
        reports: '$(System.DefaultWorkingDirectory)/testresults/*/coverage.cobertura.xml'
        targetdir: '$(System.DefaultWorkingDirectory)/coveragereport'
        sourcedirs: WorkshopAPI/src/API
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage from $(System.DefaultWorkingDirectory)/testresults/*/Cobertura.xml'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coveragereport/Cobertura.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/WorkshopAPI/src/API'
        additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/coveragereport/index.html'
        failIfCoverageEmpty: true
    - task: SonarCloudAnalyze@1
      displayName: 'Sonar Analyse'
      condition: and(succeeded(), eq(variables.is_main_branch, true))
    - task: SonarCloudPublish@1
      displayName: 'Sonar Publish'
      inputs:
        pollingTimeoutSec: '300'
      condition: and(succeeded(), eq(variables.is_main_branch, true))
    # Zip the Azure Function code for deployment
    - task: ArchiveFiles@2
      displayName: 'Package Azure Function'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(version_semantic).zip
        replaceExistingArchive: true
    # upload the Zip file
    - publish: $(Build.ArtifactStagingDirectory)/$(version_semantic).zip
      artifact: function_package

- stage: DeployToStaging
  displayName: Deploy to staging
  dependsOn:
    - Setup # we need values from ARM Template deployment
    - Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: '$(agent_image_name)'
    variables:
      # values from previous Stage
      StorageConnectionStringFromSetup: $[ stageDependencies.Setup.Setup.outputs['generateArmVariables.StagingConnectionString'] ]
      AppNameFromSetup: $[ stageDependencies.Setup.Setup.outputs['generateArmVariables.FunctionAppName'] ]
      BaseUrlFromSetup: $[ stageDependencies.Setup.Setup.outputs['generateArmVariables.StagingBaseUrl'] ]

    steps:
    # download the Zip file
    - download: current
      artifact: function_package
    # this is the deployment step into Staging slot
    - task: AzureFunctionApp@1
      displayName: 'Azure functions app deploy'
      inputs:
        azureSubscription: '$(arm_connection)'
        appType: 'functionApp'
        appName: '$(AppNameFromSetup)'
        deployToSlotOrASE: true
        resourceGroupName: '$(resourcegroup_name)'
        slotName: 'staging'
        package: '$(Pipeline.Workspace)/function_package/$(version_semantic).zip'
        deploymentMethod: 'runFromPackage' # zipDeploy
    # run tests against the Function in Staging
    - task: DotNetCoreCLI@2
      displayName: Integration Tests
      inputs:
        command: 'test'
        projects: WorkshopAPI/src/tests/WorkshopAPI.IntegrationTests/WorkshopAPI.IntegrationTests.csproj
        testRunTitle: 'Integration Tests'
      env:
        StorageConnectionString: $(StorageConnectionStringFromSetup)
        BaseUrl: $(BaseUrlFromSetup)
    - task: XplatGenerateReleaseNotes@3
      inputs:
        outputfile: '$(Build.ArtifactStagingDirectory)/ReleaseNotes.md'
        templateLocation: 'File'
        templatefile: 'WorkshopAPI/pipeline/ReleaseNotes-Template.md'
        checkStage: true
        dumpPayloadToConsole: false
        dumpPayloadToFile: false
        replaceFile: true
        getParentsAndChildren: false
        getAllParents: false
        getIndirectPullRequests: false
    - publish: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      artifact: doc

- stage: DeployToProduction
  displayName: Deploy to Production
  dependsOn:
    - Setup # we need values from ARM Template deployment
    - DeployToStaging
  condition: and(succeeded(), eq(variables.is_main_branch, true))
  jobs:
  - deployment: DeployProduction
    environment: 'Production'
    variables:
      # values from previous Stage
      StorageConnectionStringFromSetup: $[ stageDependencies.Setup.Setup.outputs['generateArmVariables.ProductionConnectionString'] ]
      AppNameFromSetup: $[ stageDependencies.Setup.Setup.outputs['generateArmVariables.FunctionAppName'] ]
      ProductionBaseUrlFromSetup: $[ stageDependencies.Setup.Setup.outputs['generateArmVariables.ProductionBaseUrl'] ]
    strategy:
      runOnce:
        deploy:
          pool:
            vmImage: '$(agent_image_name)'
        
          steps:
          # need test source code
          - checkout: self
          # Staging replaces Production
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: '$(arm_connection)'
              Action: 'Swap Slots'
              WebAppName: '$(AppNameFromSetup)'
              ResourceGroupName: '$(resourcegroup_name)'
              SourceSlot: 'staging'
